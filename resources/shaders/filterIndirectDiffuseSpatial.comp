#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable

#include "global.inc"
#include "linearDepth.inc"
#include "screenToWorld.inc"
#include "noise.inc"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set=1, binding = 0, rgba16f) 	uniform image2D imageOut_Y_SH;
layout(set=1, binding = 1, rg16f) 		uniform image2D imageOut_CoCg;
layout(set=1, binding = 2) 				uniform texture2D texture_Y_SH;
layout(set=1, binding = 3) 				uniform texture2D texture_CoCg;
layout(set=1, binding = 4) 	            uniform texture2D depthTexture;
layout(set=1, binding = 5) 	            uniform texture2D normalTexture;

layout(constant_id = 0) const int filterIndex = 0;

vec3 pixelToWorld(vec2 uv){
	float depth = texture(sampler2D(depthTexture, g_sampler_nearestClamp), uv).r;
	float depthLinear = linearizeDepth(depth, g_nearPlane, g_farPlane);

	vec2 pixelNDC = uv * 2 - 1;
	vec3 cameraToPixel = -calculateViewDirectionFromPixel(pixelNDC, g_cameraForward.xyz, g_cameraUp.xyz, g_cameraRight.xyz, g_cameraTanFovHalf, g_cameraAspectRatio);
	return g_cameraPosition.xyz + cameraToPixel / dot(cameraToPixel, g_cameraForward.xyz) * depthLinear;
}

void main(){

	ivec2 iUV = ivec2(gl_GlobalInvocationID.xy);

	vec2 texelSize = 1.f / vec2(imageSize(imageOut_Y_SH));
	vec2 uv = (vec2(iUV) + 0.5f) * texelSize;

	vec3 pCenter = pixelToWorld(uv);
	vec3 pRight = pixelToWorld(uv + vec2(1, 0) * texelSize);
	vec3 pUp	= pixelToWorld(uv + vec2(0, 1) * texelSize);

	vec3 tangent	= normalize(pCenter - pRight);
	vec3 bitangent	= normalize(pCenter - pUp);
	vec3 N = normalize(cross(bitangent, tangent));
	N = 2 * texture(sampler2D(normalTexture, g_sampler_nearestClamp), uv).rgb - 1;

	int sampleCount = 42;

	vec4 result_Y_SH = vec4(0);
	vec2 result_CoCg = vec2(0);
	
	float weightTotal = 0.f;

	uint rngState = wang_hash(g_frameIndex % 2 + filterIndex);

	float depth = texture(sampler2D(depthTexture, g_sampler_nearestClamp), uv).r;
	float depthLinear = linearizeDepth(depth, g_nearPlane, g_farPlane);

	float radiusWorld = 1.f;

	//filter on history buffer uses smaller radius
	if(filterIndex == 1){
		radiusWorld = 0.5f;
	}

	vec2 noiseUV = vec2(iUV) / textureSize(sampler2D(g_noiseTexture, g_sampler_linearRepeat), 0);
	float test = texture(sampler2D(g_noiseTexture, g_sampler_linearRepeat), noiseUV).r;

	float lengthModifier = 1.f;

	for(int i = 0; i < sampleCount; i++){

		float d = sqrt(rand(rngState)) * lengthModifier;
		float angle = 2 * pi * rand(rngState);

		vec2 offset = vec2(cos(angle), sin(angle)) * d;

		//samples taken in world space
		//see "Exploring the Ray Traced Future in Metro Exodus"
		vec3 sampleWorld = pCenter + radiusWorld * (offset.x * tangent + offset.y * bitangent);
		vec4 sampleProjected = g_viewProjection * vec4(sampleWorld, 1);

		vec2 sampleUV = sampleProjected.xy / sampleProjected.w;
		sampleUV = sampleUV * 0.5 + 0.5;

		//uncomment to filter in screen space with 10 pixel radius
		//sampleUV = uv + offset * texelSize * 10;

		//mirror uv at borders
		sampleUV.x = sampleUV.x < 0.f ? uv.x - offset.x : sampleUV.x;
		sampleUV.y = sampleUV.y < 0.f ? uv.y - offset.y : sampleUV.y;
		sampleUV.x = sampleUV.x > 1.f ? uv.x - offset.x : sampleUV.x;
		sampleUV.y = sampleUV.y > 1.f ? uv.y - offset.y : sampleUV.y;

		//sample are weighed with distance from tangent plane
		//this avoids bleeding light from foreground/background
		//see "Exploring the Ray Traced Future in Metro Exodus"
		vec3 pixelWorld = pixelToWorld(sampleUV);
		float distanceToTangentPlane = abs(dot(N, pixelWorld - pCenter));
		float maxDistance = 0.25f;
		float weight = clamp(maxDistance / max(distanceToTangentPlane, 0.0001f), 0, 1);
		weight *= weight;	//squared falloff

		if(any(lessThan(sampleUV, vec2(0))) || any(greaterThan(sampleUV, vec2(1)))){
			weight = 0;
			//reduce sampling radius when landing offscreen
			//this avoids close pixels and pixels near screen border being unfiltered
			lengthModifier *= 0.8f;
		}

		vec3 sampleN = 2 * texture(sampler2D(normalTexture, g_sampler_nearestClamp), sampleUV).rgb - 1;
		float NoN = max(dot(N, sampleN), 0);
		//no normal weight for now, leads to underfiltering in high fidelity areas
		//weight *= NoN;

		if(weight > 0){

			vec4 sample_Y_SH = texture(sampler2D(texture_Y_SH, g_sampler_nearestClamp), sampleUV);
			vec2 sample_CoCg = texture(sampler2D(texture_CoCg, g_sampler_nearestClamp), sampleUV).rg;

			//after resizing framebuffers nan values can occur
			if(any(isnan(sample_Y_SH)) || any(isnan(sample_CoCg))){
				//sample is invalid, do nothing
			}
			else{
				result_Y_SH += weight * sample_Y_SH; 
				result_CoCg += weight * sample_CoCg;
				weightTotal += weight;
			}
		}
	}
	weightTotal = max(weightTotal, 0.00001f);

	result_Y_SH /= weightTotal;
	result_CoCg /= weightTotal;

	imageStore(imageOut_Y_SH, iUV, result_Y_SH);
	imageStore(imageOut_CoCg, iUV, vec4(result_CoCg, 0, 0));
}
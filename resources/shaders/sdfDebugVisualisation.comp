#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_nonuniform_qualifier : enable

#include "global.inc"
#include "screenToWorld.inc"
#include "lightBuffer.inc"
#include "SDF.inc"
#include "sky.inc"
#include "sdfCulling.inc"
#include "noise.inc"
#include "sunShadowCascades.inc"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

//0: None
//1: visualize sdf
//2: camera tile usage
//3: shadow tile usage
//4: shadow tile id
layout(constant_id = 0) const int debugMode = 0;
layout(constant_id = 1) const int shadowCascadeIndex = 3;	//for light matrix

layout(set=1, binding = 0, r11f_g11f_b10f)	uniform image2D imageOut;
layout(set=1, binding = 1, std430) buffer lightStorageBuffer{
    LightBuffer lightBuffer;
};
layout(set=1, binding = 2) uniform texture2D skyLut;
layout(set=1, binding = 3, std430) buffer sdfInstanceBuffer{
    uint instanceCount;
    uint padding1;
    uint padding2;
    uint padding3;
    SDFInstance sdfInstances[];
};

layout(set=1, binding = 4, std430) buffer cameraCulledTileBuffer{
    CulledInstancesPerTile cameraCulledTiles[];
};

layout(set=1, binding = 5, std430) buffer cameraCulledSdfInstanceBuffer{
    uint cameraCulledInstanceCount;
    uint cameraCulledInstanceIndices[];
};

layout(set=1, binding = 6, std430) buffer sunShadowInfo{
    ShadowCascadeInfo sunShadowCascadeInfo;
};

layout(set=1, binding = 7) uniform texture2D shadowMap;

layout(set=2, binding = 0) uniform texture3D[] textures;

vec3 percentageToColor(float percentage){
    if(percentage < 0.6){
        return vec3(0, 1, 0);
    }
    else if(percentage < 0.8){
        return vec3(1, 1, 0);
    }
    else if(percentage < 0.95f){
        return vec3(1, 0.2, 0);
    }
    else if(percentage < 1.f){
        return vec3(1, 0.1, 0);
    }
    else{
        return vec3(1, 0, 0);
    }
}

void main(){
    ivec2 uv = ivec2(gl_GlobalInvocationID.xy);

    vec2 pixelCoor = (vec2(uv.xy) / g_screenResolution - 0.5) * 2;
    vec3 cameraToPixel = -calculateViewDirectionFromPixel(pixelCoor, g_cameraForward.xyz, g_cameraUp.xyz, g_cameraRight.xyz, g_cameraTanFovHalf, g_cameraAspectRatio);

    //FIXME: get tile size from CPU
    ivec2 tileUV = uv / ivec2(cullingTileSize);
    uint tileIndex = tileIndexFromTileUV(tileUV);

    vec3 rayStart = g_cameraPosition.xyz + g_nearPlane * cameraToPixel;

    TraceResult traceResult;
    traceResult.hit = false;
    traceResult.closestHitDistance = 10000.f;

    CulledInstancesPerTile cullingTile = cameraCulledTiles[tileIndex];

    //iterate all objects in culling tile
    for(int instanceIndex = 0; instanceIndex < cullingTile.objectCount; instanceIndex++){
        SDFInstance instance = sdfInstances[cullingTile.indices[instanceIndex]];
    //for(int instanceIndex = 0; instanceIndex < cameraCulledInstanceCount; instanceIndex++){
    //    SDFInstance instance = sdfInstances[cameraCulledInstanceIndices[instanceIndex]];

        traceRayTroughSDFInstance(instance, rayStart, textures[instance.sdfTextureIndex], cameraToPixel, traceResult);
    }

    float shadow = simpleShadow(traceResult.hitPos, sunShadowCascadeInfo.lightMatrices[shadowCascadeIndex], shadowMap, g_sampler_nearestBlackBorder);

    vec3 color = vec3(0.f);

    //camera tile usage(debugMode == 2) should always be drawn, regardless of intersection
    if(traceResult.hit || debugMode == 2){

        //sdf visualisation
        if(debugMode == 1){
            vec3 sunLight = lightBuffer.sunStrengthExposed * lightBuffer.sunColor;
            sunLight *= shadow; 
            vec3 ambient = vec3(0.15f);
            float NoL = clamp(dot(traceResult.N, g_sunDirection.xyz), 0, 1);
            color = traceResult.albedo * (ambient + sunLight * NoL);
        }
        //camera tile usage
        else if(debugMode == 2){
            float percentage = cullingTile.objectCount / float(maxObjectsPerTile);
            color = percentage >= 1.f ? vec3(1, 0, 0) :  vec3(percentage);
            //color = percentageToColor(percentage);
        }
        //normals
        else if(debugMode == 3){
            color = traceResult.N * 0.5 + 0.5;
        }
        //raymarching count
        else if(debugMode == 4){
            color = vec3(traceResult.hitCount / 128.f);
        }
    }
    else{
        color = sampleSkyLut(cameraToPixel, skyLut);
    }
    imageStore(imageOut, uv, vec4(color, 1.f));
}
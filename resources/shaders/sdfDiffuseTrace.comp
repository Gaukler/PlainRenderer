#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_nonuniform_qualifier : enable

#include "global.inc"
#include "screenToWorld.inc"
#include "linearDepth.inc"
#include "lightBuffer.inc"
#include "SDF.inc"
#include "sky.inc"
#include "sampling.inc"
#include "noise.inc"
#include "SphericalHarmonics.inc"
#include "colorConversion.inc"
#include "sdfCulling.inc"
#include "sunShadowCascades.inc"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(constant_id = 0) const bool strictInfluenceRadiusCutoff = false;
layout(constant_id = 1) const int shadowCascadeIndex = 3;	//for light matrix

layout(set=1, binding = 0, rgba16f) 	uniform image2D imageOut_Y_SH;
layout(set=1, binding = 1, rg16f) 		uniform image2D imageOut_CoCg;
layout(set=1, binding = 2) 	            uniform texture2D depthTexture;
layout(set=1, binding = 3) 	            uniform texture2D normalTexture;
layout(set=1, binding = 4)				uniform texture2D skyLut;

layout(set=1, binding = 5, std430) buffer lightStorageBuffer{
    LightBuffer lightBuffer;
};

layout(set=1, binding = 6, std430) buffer sdfInstanceBuffer{
    uint instanceCount;
	uint padding1;
	uint padding2;
	uint padding3;
	SDFInstance sdfInstances[];
};

layout(set=1, binding = 7, std430) buffer cameraCulledTileBuffer{
    CulledInstancesPerTile cameraCulledTiles[];
};

layout(set=1, binding = 8, std140) uniform influenceRangeBuffer{
    float influenceRange;
};

layout(set=1, binding = 9, std430) buffer sunShadowInfo{
    ShadowCascadeInfo sunShadowCascadeInfo;
};

layout(set=1, binding = 10) uniform texture2D shadowMap;

layout(set=2, binding = 0) uniform texture3D[] textures;

struct RayInfo{
	vec3 normal;
	float depth;
	vec3 color;
};

//matches local group size
shared RayInfo[8][8] sharedRays;

//use neighbouring rays trough LDS, if appropriate
vec3 resolveColor(vec3 initialColor, vec3 N, float depth){
	//write ray to LDS
	RayInfo ray;
	ray.normal = N;
	ray.depth = depth;
	ray.color = initialColor;

	sharedRays[gl_LocalInvocationID.x][gl_LocalInvocationID.y] = ray;

	barrier();
	memoryBarrier();

	float weightTotal = 1.f;
	vec3 color = initialColor;

	//iterate over neighbourhood
	for(int x = -1; x <= 1; x++){
		for(int y = -1; y <= 1; y++){
			//color already initialized with center ray
			if(x == 0 && y == 0){
				continue;
			}
			ivec2 rayIndex = ivec2(gl_LocalInvocationID.xy) + ivec2(x, y);
			bool isValidIndex = all(greaterThan(rayIndex, ivec2(0))) && all(lessThan(rayIndex, ivec2(8)));
			if(!isValidIndex){
				continue;
			}

			RayInfo neighbourRay = sharedRays[rayIndex.x][rayIndex.y];

			//reject based on normal and depth
			float normalThreshold = 0.9f;
			float NoN = clamp(dot(N, neighbourRay.normal), 0, 1);
			bool normalsMatch = NoN > normalThreshold;

			float depthThreshold = 0.5f;
			bool depthMatch = abs(depth - neighbourRay.depth) < depthThreshold;

			if(normalsMatch && depthMatch){
				//works out to gauss kernel, if all samples are accepted
				float weightX = x == 0 ? 1 : 0.5;
				float weightY = y == 0 ? 1 : 0.5;
				float weight = weightX * weightY;
				//weight = 1;
				color += weight * neighbourRay.color;
				weightTotal += weight;
			}
		}
	}
	color /= weightTotal;
	return color;
}

void main(){
	ivec2 iUV = ivec2(gl_GlobalInvocationID.xy);
	vec2 uv = iUV / vec2(imageSize(imageOut_Y_SH));
	float depth = texture(sampler2D(depthTexture, g_sampler_nearestClamp), uv).r;
	float depthLinear = linearizeDepth(depth, g_nearPlane, g_farPlane);

	vec2 pixelNDC = uv * 2 - 1;
	vec3 V = -calculateViewDirectionFromPixel(pixelNDC, g_cameraForward.xyz, g_cameraUp.xyz, g_cameraRight.xyz, g_cameraTanFovHalf, g_cameraAspectRatio);
	vec3 pWorld = g_cameraPosition.xyz + V / dot(V, g_cameraForward.xyz) * depthLinear;

	vec4 result_Y_SH = vec4(0.f);
	vec2 result_CoCg = vec2(0.f);

	vec2 noiseUV = vec2(iUV) / textureSize(sampler2D(g_noiseTexture, g_sampler_linearRepeat), 0);
	vec2 xi = texture(sampler2D(g_noiseTexture, g_sampler_nearestRepeat), noiseUV).rg;

	vec3 normalTexel = texture(sampler2D(normalTexture, g_sampler_nearestClamp), uv).rgb;
	vec3 N = normalTexel * 2 - 1;
	vec3 rayOrigin = pWorld + N * 0.2;

	vec3 L = importanceSampleCosine(xi, N);

	TraceResult traceResult;
	traceResult.hit = false;
	traceResult.closestHitDistance = 10000.f;
	traceResult.selfIntersection = false;

	ivec2 tileUV = iUV / ivec2(cullingTileSize);
	uint tileIndex = tileIndexFromTileUV(tileUV);

	//iterate all objects in culling tile
	CulledInstancesPerTile cullingTile = cameraCulledTiles[tileIndex];
	for(int i = 0; i < cullingTile.objectCount; i++){
		SDFInstance instance = sdfInstances[cullingTile.indices[i]];
		traceRayTroughSDFInstance(instance, rayOrigin, textures[instance.sdfTextureIndex], L, traceResult);
	}

	//white border means outside of shadow map are assumed shadowed
	float shadow  = simpleShadow(traceResult.hitPos, sunShadowCascadeInfo.lightMatrices[shadowCascadeIndex], shadowMap, g_sampler_nearestWhiteBorder);

	vec3 hitColor;

	if(traceResult.hit){
		vec3 sunLight = lightBuffer.sunStrengthExposed * lightBuffer.sunColor;
		sunLight *= shadow; 
		float NoL = clamp(dot(traceResult.N, g_sunDirection.xyz), 0, 1);
		hitColor = traceResult.albedo * sunLight * NoL;
	}
	else{
		hitColor = sampleSkyLut(L, skyLut);
	}
	//discard self intersecting rays
	if(traceResult.selfIntersection){
		hitColor = vec3(0);
		//hitColor = vec3(1, 0, 0);	//visualize self intersecting pixels in red 
	}

	//reject out of range hits
	bool hitInRange = traceResult.closestHitDistance < influenceRange;
	//accept hit regardless of distance, if not using strict influence radius cutoff
	hitInRange = hitInRange || !strictInfluenceRadiusCutoff;
	if(!hitInRange){
		hitColor = vec3(0);
	}

	hitColor = resolveColor(hitColor, N, depthLinear);

	vec3 YCoCg = linearToYCoCg(hitColor);

	result_Y_SH += YCoCg.x * directionToSH_L1(L);
	result_CoCg += YCoCg.yz;

	//multiplication by pi because PDF = NoL / pi
	//division by PDF is multiplication with pi / NoL
	//NoL is reduced with NoL from rendering equation 
	result_Y_SH *= pi;
	result_CoCg *= pi;

	imageStore(imageOut_Y_SH, iUV, result_Y_SH);
	imageStore(imageOut_CoCg, iUV, vec4(result_CoCg, vec2(0.f)));
}
#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable

#include "global.inc"
#include "colorConversion.inc"
#include "temporalReprojection.inc"
#include "bicubicSampling.inc"

layout(constant_id = 0) const bool useClipping = false;
layout(constant_id = 1) const bool useMotionVectorDilation = false;
layout(constant_id = 2) const int historySampleTech = 0;

#define HISTORY_SAMPLING_BILINEAR 0
#define HISTORY_SAMPLING_BICUBIC_16_TAP 1
#define HISTORY_SAMPLING_BICUBIC_9_TAP 2
#define HISTORY_SAMPLING_BICUBIC_5_TAP 3
#define HISTORY_SAMPLING_BICUBIC_1_TAP 4

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set=1, binding = 0) 					uniform texture2D currentFrame;
layout(set=1, binding = 1, r11f_g11f_b10f) 	uniform image2D outputImage;
layout(set=1, binding = 2, r11f_g11f_b10f) 	uniform image2D historyBufferDst;
layout(set=1, binding = 3) 	                uniform texture2D historyBufferSrc;
layout(set=1, binding = 4) 	                uniform texture2D motionBuffer;
layout(set=1, binding = 5) 	                uniform texture2D depthBuffer;
layout(set=1, binding = 6) 					uniform resolveWeightBuffer {
	float w0_0;
	float w1_0;
	float w2_0;
	float w0_1;
	float w1_1;
	float w2_1;
	float w0_2;
	float w1_2;
	float w2_2;
} resolveWeights;

float luminance(vec3 c){
    return dot(c, vec3(0.21f, 0.71f, 0.08f));
}

vec3 resolveColor(vec3 [3][3] neighbourhood, vec2 jitter){
	vec3 resolved = vec3(0);
	
	resolved += neighbourhood[0][0] * resolveWeights.w0_0;
	resolved += neighbourhood[1][0] * resolveWeights.w1_0;
	resolved += neighbourhood[2][0] * resolveWeights.w2_0;

	resolved += neighbourhood[0][1] * resolveWeights.w0_1;
	resolved += neighbourhood[1][1] * resolveWeights.w1_1;
	resolved += neighbourhood[2][1] * resolveWeights.w2_1;

	resolved += neighbourhood[0][2] * resolveWeights.w0_2;
	resolved += neighbourhood[1][2] * resolveWeights.w1_2;
	resolved += neighbourhood[2][2] * resolveWeights.w2_2;

	return resolved;
}

void main(){

	ivec2 iUV = ivec2(gl_GlobalInvocationID.xy);
    
	vec2 texelSize = 1.f / imageSize(outputImage).xy;
	vec2 uv = (iUV + 0.5) * texelSize; //+0.5 to shift to pixel center
    vec3[3][3] neighbourhood = sampleNeighbourhood(currentFrame, g_sampler_linearClamp, uv, texelSize);
	vec3[2] minMax = minMaxFromNeighbourhood(neighbourhood);

	vec3 currentColor = resolveColor(neighbourhood, g_currentFrameCameraJitter);

    vec2 motion;
    if(useMotionVectorDilation){ 
        motion = getClosestFragmentMotion(iUV, depthBuffer, motionBuffer, g_sampler_linearClamp); 
    }
    else{
        motion = texelFetch(sampler2D(motionBuffer, g_sampler_linearClamp), iUV, 0).rg;
    }
     
	vec3 historySample; 
	if(historySampleTech == HISTORY_SAMPLING_BILINEAR){ 
		vec2 uvReprojected = uv + motion;
		historySample = texture(sampler2D(historyBufferSrc, g_sampler_linearClamp), uvReprojected).rgb;
	} 
	else if(historySampleTech == HISTORY_SAMPLING_BICUBIC_16_TAP){
		vec2 uvReprojected = vec2(iUV) + 0.5f + motion * g_screenResolution;
		historySample = bicubicSample16Tap(historyBufferSrc, g_sampler_linearClamp, uvReprojected, texelSize);
	}
	else if(historySampleTech == HISTORY_SAMPLING_BICUBIC_9_TAP){
		vec2 uvReprojected = vec2(iUV) + 0.5f + motion * g_screenResolution;
		historySample = bicubicSample9Tap(historyBufferSrc, g_sampler_linearClamp, uvReprojected, texelSize);
	}  
	else if(historySampleTech == HISTORY_SAMPLING_BICUBIC_5_TAP){
		vec2 uvReprojected = vec2(iUV) + 0.5f + motion * g_screenResolution;
		historySample = bicubicSample5Tap(historyBufferSrc, g_sampler_linearClamp, uvReprojected, texelSize);
	}  
	else if(historySampleTech == HISTORY_SAMPLING_BICUBIC_1_TAP){
		vec2 uvReprojected = vec2(iUV) + 0.5f + motion * g_screenResolution;
		historySample = bicubicSample1Tap(historyBufferSrc, g_sampler_linearClamp, uvReprojected, texelSize, neighbourhood);
	}
	else{
		historySample = vec3(1, 0, 0);
	}

    if(useClipping){
        historySample = clipAABB(historySample, minMax[0], minMax[1]);
    }
    else{
        historySample = clamp(historySample, minMax[0], minMax[1]);
    }  

    //nan test, mainly a problem when resizing the buffers
    //clear previous frame buffer on resize instead of checking here
    if(isnan(historySample.x) || isnan(historySample.y) || isnan(historySample.z)){
        historySample = currentColor;
    }
	
	float distanceToClamp = 5 * abs(computeLuminance(unclipped) - computeLuminance(historySample));
	distanceToClamp = pow(distanceToClamp, 2);
	distanceToClamp = clamp(distanceToClamp, 0, 1);

	float blendMin = 0.025f;
	float blendMax = 0.1;
	//float blendFactor = 0.1f;
	float blendFactor = mix(blendMin, blendMax, distanceToClamp);

	float blendFactor = 0.05f;
	if(g_cameraCut){
		blendFactor = 1.f;
	}

    vec3 color = mix(historySample, currentColor, blendFactor);

    imageStore(historyBufferDst, iUV, vec4(color, 1.f));    
	imageStore(outputImage, iUV, vec4(color, 1.f));
}
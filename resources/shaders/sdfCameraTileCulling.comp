#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable

#include "global.inc"
#include "sdfCulling.inc"
#include "screenToWorld.inc"
#include "linearDepth.inc"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(constant_id = 0) const bool useHiZ = false;
layout(constant_id = 1) const bool halfResTracing = true;

layout(set=1, binding = 0, std430) buffer culledSdfInstanceBuffer{
    uint culledInstanceCount;
	uint culledInstanceIndices[];
};

layout(set=1, binding = 1, std430) buffer worldBBInstanceBuffer{
	BoundingBox instanceBBs[];
};

layout(set=1, binding = 2, std430) buffer perTileInstanceBuffer{
    CulledInstancesPerTile cullingTiles[];
};

layout(set=1, binding = 3, std140) uniform influenceRangeBuffer{
    float influenceRange;
};

layout(set=1, binding = 4)	uniform texture2D depthMinMaxTexture;

vec3 VFromiUV(ivec2 iUV){
	vec2 pixelCoor = (iUV / vec2(g_screenResolution) - 0.5) * 2;
	return calculateViewDirectionFromPixel(pixelCoor, g_cameraForward.xyz, g_cameraUp.xyz, g_cameraRight.xyz, g_cameraTanFovHalf, g_cameraAspectRatio);
}

void main(){
	ivec2 tileUV = ivec2(gl_GlobalInvocationID.xy);

	uvec2 tileCount = uvec2(ceil(g_screenResolution / vec2(cullingTileSize)));
	tileCount /= halfResTracing ? 2 : 1;

	if(any(greaterThanEqual(tileUV, tileCount))){
		return;
	}

	uint tileIndex = tileIndexFromTileUV(tileUV);

	cullingTiles[tileIndex].objectCount = 0;

	vec3 cameraToPixel = -VFromiUV(tileUV * int(cullingTileSize) + ivec2(cullingTileSize, cullingTileSize) / 2);

	vec3 V_ll = -VFromiUV(tileUV * int(cullingTileSize));
	vec3 V_ur = -VFromiUV(tileUV * int(cullingTileSize) + ivec2(cullingTileSize, cullingTileSize));
	V_ll /= dot(cameraToPixel, V_ll);
	V_ur /= dot(cameraToPixel, V_ur);

	float coneRadiusPerMeter = distance(V_ll, V_ur) * 0.5f;

	float depthMin = g_nearPlane;
	float depthMax = g_farPlane;
	bool test = true;
	//test = false;
	vec2 uv = tileUV / vec2(tileCount);
	if(useHiZ && test){
		

		depthMin = g_farPlane;
		depthMax = g_nearPlane;

		const int mip = 4;

		for(int x = -1; x <= 1; x++){
			for(int y = -1; y <= 1; y++){
				vec2 depthMinMax = textureLod(sampler2D(depthMinMaxTexture, g_sampler_nearestClamp), uv + vec2(x, y) / tileCount, mip).rg;
				depthMin = min(depthMin, linearizeDepth(depthMinMax.g, g_nearPlane, g_farPlane));
				depthMax = max(depthMax, linearizeDepth(depthMinMax.r, g_nearPlane, g_farPlane));
			}
		}
		vec2 depthMinMax = textureLod(sampler2D(depthMinMaxTexture, g_sampler_nearestClamp), uv, mip).rg;
		depthMin = linearizeDepth(depthMinMax.g, g_nearPlane, g_farPlane);
		depthMax = linearizeDepth(depthMinMax.r, g_nearPlane, g_farPlane);
	}

	//if(uv.x < 0.5 ){
	//	depthMin = 10;
	//	depthMax = 20;
	//}
	//else{
	//	depthMin = 0;
	//	depthMax = 0;
	//}
	

	depthMin *= dot(cameraToPixel, g_cameraForward.xyz);
	depthMax *= dot(cameraToPixel, g_cameraForward.xyz);

	for(int i = 0; i < culledInstanceCount; i++){
		BoundingBox bb = instanceBBs[culledInstanceIndices[i]];
		 
		if(cullingTiles[tileIndex].objectCount >= maxObjectsPerTile){
			break;
		}

		vec3 boundingSphereCenter = (bb.bbMax + bb.bbMin) * 0.5f;
		vec3 bbExtends = (bb.bbMax - bb.bbMin) * 0.5f;
		float boundingSphereRadius = max(max(bbExtends.x, bbExtends.y), bbExtends.z);
		boundingSphereRadius += influenceRange;

		float projection = dot(boundingSphereCenter - g_cameraPosition.xyz, cameraToPixel);
		projection = clamp(projection, depthMin, depthMax);
		float d = distance(boundingSphereCenter, projection * cameraToPixel + g_cameraPosition.xyz);

		if(d < boundingSphereRadius + coneRadiusPerMeter * projection){
			cullingTiles[tileIndex].indices[cullingTiles[tileIndex].objectCount] = culledInstanceIndices[i];
			cullingTiles[tileIndex].objectCount++;
		}
	}
}
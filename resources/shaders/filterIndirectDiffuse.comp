#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable

#include "global.inc"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set=1, binding = 0, r11f_g11f_b10f) 	uniform image2D		imageOut;
layout(set=1, binding = 1) 	                uniform texture2D	textureIn;
layout(set=1, binding = 2) 	                uniform texture2D	depthTexture;

void main(){
	ivec2 iUV = ivec2(gl_GlobalInvocationID.xy);

	vec2 texelSize = 1.f / g_screenResolution;
	vec2 uv = (vec2(iUV) + 0.5f) * texelSize;
	vec3 color = vec3(0.f);

	int sampleCount = 16;

	float radius = 10.f;
	for(int i = 0; i < sampleCount; i++){
		float d = (i + 0.5f) / sampleCount;
		d = sqrt(d);
		float angle = 2 * pi * i / sampleCount;
		vec2 offset = vec2(cos(angle), sin(angle));
		offset *= radius * texelSize;

		vec2 sampleUV = uv + offset;
		//mirror uv at borders
		sampleUV.x = sampleUV.x < 0.f ? uv.x - offset.x : sampleUV.x;
		sampleUV.y = sampleUV.y < 0.f ? uv.y - offset.y : sampleUV.y;
		sampleUV.x = sampleUV.x > 1.f ? uv.x - offset.x : sampleUV.x;
		sampleUV.y = sampleUV.y > 1.f ? uv.y - offset.y : sampleUV.y;

		color += texture(sampler2D(textureIn, g_sampler_linearRepeat), sampleUV).rgb;
	}

	color /= sampleCount;
	//color = texture(sampler2D(textureIn, g_sampler_linearRepeat), uv).rgb;
	//color = texture(sampler2D(depthTexture, g_sampler_linearRepeat), uv).rrr * 10;
	imageStore(imageOut, iUV, vec4(color, 1.f));
}
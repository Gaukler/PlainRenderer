#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable

#include "global.inc"
#include "volumeShading.inc"
#include "volumetricFroxelLighting.inc"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set=1, binding = 0, rgba16f) uniform image3D integrationVolume;
layout(set=1, binding = 1) uniform texture3D scatteringTransmittanceVolume;

void main(){
	uvec2 iUV = gl_GlobalInvocationID.xy;
	uvec3 volumeRes = imageSize(integrationVolume);
	if(any(greaterThanEqual(iUV, volumeRes.xy))){
		return;
	}

	vec3 inscatteringTotal = vec3(0);
	float transmittance = 1;

	float depthSegmentLength = maxVolumetricLightingDepth / volumeRes.z;

	
	for(int z = 0; z <= volumeRes.z; z++){
		vec4 inscatteringTransmittance = texelFetch(sampler3D(scatteringTransmittanceVolume, g_sampler_nearestClamp), ivec3(iUV.xy, z), 0);

		vec3 inscattering = integrateInscattering(inscatteringTransmittance.rgb, vec3(inscatteringTransmittance.a), depthSegmentLength);
		inscatteringTotal += inscattering;

		transmittance *= exp(-inscatteringTransmittance.a * depthSegmentLength);

		imageStore(integrationVolume, ivec3(iUV, z), vec4(inscatteringTotal, transmittance));
	}	
}
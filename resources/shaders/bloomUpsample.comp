#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable

#include "global.inc"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set=1, binding = 0, r11f_g11f_b10f) uniform image2D target;
layout(set=1, binding = 1) uniform texture2D targetPreviousMip;
layout(set=1, binding = 2) uniform texture2D source;

layout(constant_id = 0) const bool isLowestMip = false;

layout(push_constant) uniform PushConstants {
	float blurRadius;
};

void main(){
	ivec2 iUV = ivec2(gl_GlobalInvocationID.xy);
	ivec2 targetResolution = imageSize(target);

	if(any(greaterThan(iUV, targetResolution))){
		return;
	}

	ivec2 srcResolution = textureSize(sampler2D(source, g_sampler_linearClamp), 0);
	vec2 texelSize = 1.f / vec2(srcResolution);
	vec2 sampleStepSize = blurRadius * texelSize;

	vec2 uv = (iUV + 0.5f) / vec2(targetResolution);

	//blur current downscaled mip level
	vec3 color = vec3(0);

	color += textureLod(sampler2D(source, g_sampler_linearClamp), uv, 0).rgb * 0.25f;

	color += textureLod(sampler2D(source, g_sampler_linearClamp), uv + sampleStepSize * vec2( 1,  0), 0).rgb * 0.125f;
	color += textureLod(sampler2D(source, g_sampler_linearClamp), uv + sampleStepSize * vec2(-1,  0), 0).rgb * 0.125f;
	color += textureLod(sampler2D(source, g_sampler_linearClamp), uv + sampleStepSize * vec2( 0,  1), 0).rgb * 0.125f;
	color += textureLod(sampler2D(source, g_sampler_linearClamp), uv + sampleStepSize * vec2( 0, -1), 0).rgb * 0.125f;

	color += textureLod(sampler2D(source, g_sampler_linearClamp), uv + sampleStepSize * vec2( 1,  1), 0).rgb * 0.0625f;
	color += textureLod(sampler2D(source, g_sampler_linearClamp), uv + sampleStepSize * vec2( 1, -1), 0).rgb * 0.0625f;
	color += textureLod(sampler2D(source, g_sampler_linearClamp), uv + sampleStepSize * vec2(-1,  1), 0).rgb * 0.0625f;
	color += textureLod(sampler2D(source, g_sampler_linearClamp), uv + sampleStepSize * vec2(-1, -1), 0).rgb * 0.0625f;

	if(!isLowestMip){
		//add previous upscaled mip level
		//use repeated box filter for good upscaling quality
		color += textureLod(sampler2D(targetPreviousMip, g_sampler_linearClamp), uv + texelSize * vec2( 0.5,  0.5), 0).rgb * 0.25;
		color += textureLod(sampler2D(targetPreviousMip, g_sampler_linearClamp), uv + texelSize * vec2( 0.5, -0.5), 0).rgb * 0.25;
		color += textureLod(sampler2D(targetPreviousMip, g_sampler_linearClamp), uv + texelSize * vec2(-0.5,  0.5), 0).rgb * 0.25;
		color += textureLod(sampler2D(targetPreviousMip, g_sampler_linearClamp), uv + texelSize * vec2(-0.5, -0.5), 0).rgb * 0.25;
	}

	imageStore(target, iUV, vec4(color, 0));
}
#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable

#include "global.inc"
#include "lightBuffer.inc"

layout(constant_id = 0) const int constNBins = 64;
layout(constant_id = 1) const float constMinLuminance = 1.f;
layout(constant_id = 2) const float constMaxLuminance = 100.f;

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set=1, binding = 0, std430) buffer lightStorageBuffer{
    LightBuffer lightBuffer;
};

layout(set=1, binding = 1, std430) buffer histogramBuffer{
    uint histogram[constNBins];
};

void main(){
    
    const float minLuminanceLog = log(constMinLuminance);
    const float maxLuminanceLog = log(constMaxLuminance);
    
    float mean = 0.f;
    float total = 0.f;
    for(int i = 0; i < constNBins; i++){
        float binValueLog = minLuminanceLog + (maxLuminanceLog - minLuminanceLog) * i / float(constNBins - 1.f);
        float binValueLinear = exp(binValueLog);
        mean += histogram[i] * binValueLinear;
        total += histogram[i];
    }
    mean /= total;
    
    float targetEV100 = log2(mean * 100.f / 12.5f) - g_exposureOffset;
    float previousEV100 = log2(1.f / (max(lightBuffer.previousFrameExposure, 0.000001f) * 1.2f));
    
    float evDelta = targetEV100 - previousEV100;
    float evMaxChange = g_exposureAdaptionSpeedEvPerSec * g_deltaTime;
    float evChange = sign(evDelta) * min(abs(evDelta), abs(evMaxChange));
    
    float currentEV100 = previousEV100 + evChange;

    float exposure =  1.f / (pow(2.f, currentEV100) * 1.2f);
    lightBuffer.sunStrengthExposed = g_sunStrength * exposure;
    lightBuffer.skyStrengthExposed = g_skyStrength * exposure;
    lightBuffer.previousFrameExposure = exposure;
}
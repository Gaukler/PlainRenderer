#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable

#include "sky.inc"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set=1, binding = 0, r11f_g11f_b10f) uniform image2D lut;

layout(set=1, binding = 1, std140) uniform atmosphereSettings{
    vec3 scatteringRayleighGround;
    float earthRadius;
    vec3 extinctionRayleighGround;
    float atmosphereHeight;
    vec3 ozoneExtinction;
    float scatteringMieGround;
    float extinctionMieGround;
};

void main(){
	ivec2 uv = ivec2(gl_GlobalInvocationID.xy);
	
    float x = uv.x / float(imageSize(lut).x);
    float y = uv.y / float(imageSize(lut).y);
    
    float height = mix(0, atmosphereHeight, x);
    
    float upDot = y * 2 - 1;
    vec3 V = vec3(0, -upDot, sqrt(1 - (upDot * upDot)));
    
    vec3 P = vec3(0, -height - earthRadius, 0);
    vec3 earthCenter = vec3(0);
    vec3 intersection = rayFromInsideSphereIntersection(P, V, earthCenter, earthRadius + atmosphereHeight);
    float pathLength = distance(intersection, P);
        
    const int sampleCount = 32;
    float stepLength = pathLength / sampleCount;
    
    vec3 currentPos = intersection;
    vec3 opticalDepth = vec3(0);
    for(int i = 0; i < sampleCount; i++){
        float currentHeight = max(distance(earthCenter, currentPos) - earthRadius, 0);
        
        vec3 rayleighSun = extinctionRayleighGround * rayleighHeightFactor(currentHeight);
        float mieSun = extinctionMieGround * mieHeightFactor(currentHeight);
        vec3 ozoneSun = ozoneExtinction * ozoneHeightFactor(currentHeight);
        opticalDepth += (rayleighSun + mieSun + ozoneSun) * stepLength;
        
        currentPos -= stepLength * V;
    }    
    vec3 absorption = exp(-opticalDepth);
	imageStore(lut, uv, vec4(absorption, 0.f));
}
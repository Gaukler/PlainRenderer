#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable

#include "sky.inc"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set=1, binding = 0, r11f_g11f_b10f) uniform image2D lut;

layout(set=1, binding = 1, std140) uniform atmosphereSettingsBuffer{
    AtmosphereSettings atmosphereSettings;
};

void main(){
	ivec2 uv = ivec2(gl_GlobalInvocationID.xy);
	
    float x = uv.x / float(imageSize(lut).x - 1);
    float y = uv.y / float(imageSize(lut).y - 1);
    
    float height = mix(0, atmosphereSettings.atmosphereHeight, x);
    
    float upDot = y * 2 - 1;
    upDot = max(upDot, -0.999); //problems with upDot == -1
    vec3 V = vec3(0, -upDot, sqrt(1 - (upDot * upDot)));
    
    vec3 P = vec3(0, -height - atmosphereSettings.earthRadius, 0);
    vec3 earthCenter = vec3(0);
    Intersection intersection = rayEarthIntersection(P - 0.01, V, earthCenter, atmosphereSettings.earthRadius, atmosphereSettings.atmosphereHeight);
    float pathLength = max(distance(intersection.pos, P), 0.01); //avoid division trough zero at atmosphere top
         
    const int sampleCount = 40;
    float stepLength = pathLength / sampleCount;
    
    vec3 currentPos = intersection.pos;
    vec3 absorption = vec3(1);
    vec3 step = V * stepLength;
    
    for(int i = 0; i < sampleCount; i++){
        currentPos -= step;
        float currentHeight = max(distance(earthCenter, currentPos) - atmosphereSettings.earthRadius, 0);
        AtmosphereCoefficients coefficients = calculateCoefficients(currentHeight, atmosphereSettings);
        absorption *= exp(-coefficients.extinction * stepLength);
    }    
    absorption = intersection.hitEarth ? vec3(0) : absorption; 
	imageStore(lut, uv, vec4(absorption, 0.f));
}
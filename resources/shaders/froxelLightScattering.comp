#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable

#include "global.inc"
#include "sunShadowCascades.inc"
#include "screenToWorld.inc"
#include "lightBuffer.inc"
#include "volumeShading.inc"
#include "luminance.inc"
#include "volumetricFroxelLighting.inc"

layout(local_size_x = 4, local_size_y = 4, local_size_z = 4) in;

layout(set=1, binding = 0, rgba16f) uniform image3D scatteringTransmittanceVolume;
layout(set=1, binding = 1) uniform texture2D sunShadowMap;
layout(set=1, binding = 2) uniform texture3D materialVolume;

layout(set=1, binding = 3, std430) buffer sunShadowInfo{
    ShadowCascadeInfo sunShadowCascadeInfo;
};

layout(set=1, binding = 4, std430) buffer lightStorageBuffer{
    LightBuffer lightBuffer;
};

layout(set=1, binding = 5) uniform SettingsBuffer {
    VolumetricLightingSettings settings;
};

void main(){
    uvec3 iUV = gl_GlobalInvocationID.xyz;
    uvec3 volumeRes = imageSize(scatteringTransmittanceVolume);
    if(any(greaterThanEqual(iUV, volumeRes))){
        return;
    }

    //calculate world position
    vec3 uv = (iUV + 0.5f + settings.sampleOffset) / volumeRes;
    vec3 ndc = 2.f * uv - 1;
    vec3 V = calculateViewDirectionFromPixel(ndc.xy, g_cameraForward.xyz, g_cameraUp.xyz, g_cameraRight.xyz, g_cameraTanFovHalf, g_cameraAspectRatio);

    vec3 posWorld = g_cameraPosition.xyz - V / dot(-V, g_cameraForward.xyz) * froxelUVToDepth(uv.z, settings.maxDistance);

    float shadow = simpleShadow(posWorld, sunShadowCascadeInfo.lightMatrices[2], sunShadowMap, g_sampler_nearestBlackBorder);
    float sunStrength = shadow * lightBuffer.sunStrengthExposed;

    vec3 L = g_sunDirection.xyz;
    float VoL = dot(-V, L);
    float phase = phaseGreenstein(VoL, settings.phaseFunctionG);

    vec4 scatteringAbsorptionCoefficients = texelFetch(sampler3D(materialVolume, g_sampler_nearestClamp), ivec3(iUV), 0);
    vec3 scatteringCoefficient = scatteringAbsorptionCoefficients.rgb;
    float absorptionCoefficient = scatteringAbsorptionCoefficients.a;

    //indirect lighting is not volumetric, so no proper contribution to volumetric lighting is currently implemented
    vec3 constantAmbientLighting = vec3(0.02f);
    vec3 inscattering = (sunStrength * phase * lightBuffer.sunColor.rgb + constantAmbientLighting) * scatteringCoefficient;

    vec3 extinctionCoefficient = scatteringCoefficient + absorptionCoefficient;
    float transmittance = computeLuminance(extinctionCoefficient);

    imageStore(scatteringTransmittanceVolume, ivec3(iUV), vec4(inscattering, transmittance));
}
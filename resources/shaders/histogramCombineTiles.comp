#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable

#include "global.inc"

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(constant_id = 0) const uint constNBins = 64;
//multiplication factor to shift the number range over 1 for very dimm light values, as log() of values < 0 are negative and is problematic

layout(constant_id = 1) const int constNTiles = 32400;

layout(set=1, binding = 0, std430) buffer histogramPerTileBuffer{
    uint histogramPerTile[constNTiles * constNBins];
};

layout(set=1, binding = 1, std430) buffer histogramBuffer{
    uint histogram[constNBins];
};

//Reference: https://en.wikipedia.org/wiki/Relative_luminance
float colorToLuminance(vec3 color){
    return dot(color, vec3(0.2126f, 0.7152f, 0.0722f));
}

void main(){
    uint bin = gl_LocalInvocationID.x + 64 * gl_WorkGroupID.y;
    if(bin > constNBins){
        return;
    }
    uint tile = gl_WorkGroupID.x;
    atomicAdd(histogram[bin], histogramPerTile[tile * constNBins + bin]);
}
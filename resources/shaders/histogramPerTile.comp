#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable

#include "global.inc"

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(constant_id = 0) const uint constNBins = 64;
layout(constant_id = 1) const float constMinLuminance = 1.f;
layout(constant_id = 2) const float constMaxLuminance = 100.f;
layout(constant_id = 3) const int constNTiles = 32400;

layout(set=1, binding = 0, std430) buffer histogramPerTileBuffer{
    uint histogramPerTile[constNTiles * constNBins];
};

layout(set=1, binding = 2) uniform texture2D srcTexture;
layout(set=1, binding = 4) uniform sampler texelSampler;

layout(set=1, binding = 3, std430) buffer lightBuffer{
    float previousFrameExposure;
    float sunStrengthExposed;
    float skyStrengthExposed;
};

shared uint localHistogram[constNBins];

//Reference: https://en.wikipedia.org/wiki/Relative_luminance
float colorToLuminance(vec3 color){
    return dot(color, vec3(0.2126f, 0.7152f, 0.0722f));
}

void main(){
    
    ivec2 uv = ivec2(gl_GlobalInvocationID.xy);   
    ivec2 inputSize = textureSize(sampler2D(srcTexture, texelSampler), 0);
    
    if(uv.x >= inputSize.x || uv.y >= inputSize.y){
        return;
    }
    
    //FIXME could break for 8x8 threadsizes or huge bin count
    uint localIndexFlat = gl_LocalInvocationID.x + gl_LocalInvocationID.y * gl_WorkGroupSize.x;
    if(localIndexFlat < constNBins){
        localHistogram[localIndexFlat] = 0;     
    }
    
    barrier();
    
    const float minLuminanceLog = log(constMinLuminance);
    const float maxLuminanceLog = log(constMaxLuminance);

    vec3 color = texelFetch(sampler2D(srcTexture, texelSampler), uv, 0).rgb;    
    float luminance = colorToLuminance(color) / previousFrameExposure;
    float luminanceLog = log(luminance);
    const uint maxIndex = constNBins - 1;
    uint bin = uint(maxIndex * clamp((luminanceLog - minLuminanceLog) / (maxLuminanceLog - minLuminanceLog), 0.f, 1.f));
    atomicAdd(localHistogram[bin], 1); 

    barrier();
    
    uint tileIndex = gl_WorkGroupID.x + gl_WorkGroupID.y * uint(ceil(float(inputSize.x) / float(gl_WorkGroupSize.x))); 
    if(localIndexFlat < constNBins){
        uint binIndex = localIndexFlat;
        histogramPerTile[tileIndex * constNBins + binIndex] = localHistogram[binIndex];      
    }
}
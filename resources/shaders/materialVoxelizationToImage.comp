#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable

#include "global.inc"
#include "materialVoxelization.inc"
#include "volume.inc"

layout(set=1, binding = 0, rgba8) uniform image3D materialVoxelImage;

layout(set=1, binding = 1, std430) buffer sdfVolumeData{
    MaterialCounter counters[];
};

layout(local_size_x = 4, local_size_y = 4, local_size_z = 4) in;

void main(){
	ivec3 index3D = ivec3(gl_GlobalInvocationID.xyz);
	ivec3 imageRes = imageSize(materialVoxelImage);

	if(any(greaterThanEqual(index3D, imageRes))){
		return;
	}

	uint indexFlat = flatten3DIndex(index3D, imageRes);
	MaterialCounter m = counters[indexFlat];

	vec4 albedo;
	albedo.r = (m.r / m.counter) / 255.f;
	albedo.g = (m.g / m.counter) / 255.f;
	albedo.b = (m.b / m.counter) / 255.f;
	albedo.a = 1.f;

	if(m.counter == 0){
		albedo = vec4(0.f);
	}

	imageStore(materialVoxelImage, index3D, albedo);
}
#version 460
#extension GL_ARB_separate_shader_objects : enable

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

//specialisation constants provide resolution and mip count
//control flow caused by resolution and mip count should be compiled out because of this
layout(constant_id = 0) const int mipCount = 0;
layout(constant_id = 1) const int depthBufferResX = 0;
layout(constant_id = 2) const int depthBufferResY = 0;
layout(constant_id = 3) const int threadGroupCount = 0;

//maximum of 11 mip levels supported, meaning maximum resolution of 2024*2024
//this is similar to the AMD shader, however in this case the depth buffer is the full resolution version, which is why the maximum is 11 instead of 12
//effectively mip0 has to be computed instead of being the input
//mips must be bound so mip11 matches the lowest mip level to write to, first mips may be unused and bound with a placeholder
//this makes the compile time control flow easier
layout(set=1, binding = 0, rg32f) uniform image2D pyramidMip0;
layout(set=1, binding = 1, rg32f) uniform image2D pyramidMip1;
layout(set=1, binding = 2, rg32f) uniform image2D pyramidMip2;
layout(set=1, binding = 3, rg32f) uniform image2D pyramidMip3;
layout(set=1, binding = 4, rg32f) uniform image2D pyramidMip4;
layout(set=1, binding = 5, rg32f) uniform image2D pyramidMip5;
layout(set=1, binding = 6, rg32f) uniform image2D pyramidMip6;
layout(set=1, binding = 7, rg32f) uniform image2D pyramidMip7;
layout(set=1, binding = 8, rg32f) uniform image2D pyramidMip8;
layout(set=1, binding = 9, rg32f) uniform image2D pyramidMip9;
layout(set=1, binding = 10, rg32f) uniform image2D pyramidMip10;

layout(set=1, binding = 13) uniform texture2D    depthBuffer;
layout(set=1, binding = 14) uniform sampler      depthSampler;

//texture access for sampling
layout(set=1, binding = 15) uniform texture2D pyramidTexture;

layout(set=1, binding = 16, std430) buffer syncBuffer{
    uint syncCounter;
};

shared uint threadCounter;

bool isOdd(int i){
    return (i % 2) == 1;
}

//extra rows and columns are needed when the src resolution is odd, as that means three texels lie in the footprint
//max comparisons reject depth value that are exactly 1 as they are most likely sky texels
//this might cause problems when using it as a acceleration structure
//in that case the pyramid will need an extra channel to compute max with/without sky
vec2 computeMinMax(ivec2 upperLeft, bool fromDepthBuffer, int srcMipLevel, ivec2 srcRes, bool extraRow, bool extraColumn){
    ivec2 offsets[4] = { ivec2(0, 0), ivec2(1, 0), ivec2(0, 1), ivec2(1, 1) };
    
    float depthMin = 1.f;
    float depthMax = 0.f;
    
    vec2 texelSize = vec2(1.f) / vec2(srcRes);
    vec2 upperLeftUV = upperLeft * texelSize;
    upperLeftUV += texelSize * 0.5f; //shift to texel center
    
    for(int texel = 0; texel < 4; texel++){
        vec2 uv = upperLeftUV + offsets[texel] * texelSize;
        if(fromDepthBuffer){
            float depthTexel = textureLod(sampler2D(depthBuffer, depthSampler), uv, srcMipLevel).r;
            depthMin = min(depthMin, depthTexel);
            depthMax = max(depthMax, depthTexel * float(depthTexel != 1.f));
        }
        else{
            vec2 previousMinMax = textureLod(sampler2D(pyramidTexture, depthSampler), uv, srcMipLevel).rg;
            depthMin = min(depthMin, previousMinMax.r);
            depthMax = max(depthMax, previousMinMax.g * float(previousMinMax.g != 1.f));
        }
    }

    if(extraRow){
        vec2 extraRowOffsets[2] = { vec2(0, 2), vec2(1, 2) };
        for(int texel = 0; texel < 2; texel++){
            vec2 uv = upperLeftUV + extraRowOffsets[texel] * texelSize;
            if(fromDepthBuffer){
                float depthTexel = textureLod(sampler2D(depthBuffer, depthSampler), uv, srcMipLevel).r;
                depthMin = min(depthMin, depthTexel);
                depthMax = max(depthMax, depthTexel * float(depthTexel != 1.f));
            }
            else{
                vec2 previousMinMax = textureLod(sampler2D(pyramidTexture, depthSampler), uv, srcMipLevel).rg;
                depthMin = min(depthMin, previousMinMax.r);
                depthMax = max(depthMax, previousMinMax.g * float(previousMinMax.g != 1.f));
            }
        }
    }
    
    if(extraColumn){
        vec2 extraColumnOffsets[2] = { vec2(2, 0), vec2(2, 1) };
        for(int texel = 0; texel < 2; texel++){
            vec2 uv = upperLeftUV + extraColumnOffsets[texel] * texelSize;
            if(fromDepthBuffer){
                float depthTexel = textureLod(sampler2D(depthBuffer, depthSampler), uv, srcMipLevel).r;
                depthMin = min(depthMin, depthTexel);
                depthMax = max(depthMax, depthTexel * float(depthTexel != 1.f));
            }
            else{
                vec2 previousMinMax = textureLod(sampler2D(pyramidTexture, depthSampler), uv, srcMipLevel).rg;
                depthMin = min(depthMin, previousMinMax.r);
                depthMax = max(depthMax, previousMinMax.g * float(previousMinMax.g != 1.f));
            }
        }
    }
    
    if(extraRow && extraColumn){
        vec2 uv = upperLeftUV + ivec2(2, 2) * texelSize;
        if(fromDepthBuffer){
            float depthTexel = textureLod(sampler2D(depthBuffer, depthSampler), uv, srcMipLevel).r;
            depthMin = min(depthMin, depthTexel);
            depthMax = max(depthMax, depthTexel * float(depthTexel != 1.f));
        }
        else{
            vec2 previousMinMax = textureLod(sampler2D(pyramidTexture, depthSampler), uv, srcMipLevel).rg;
            depthMin = min(depthMin, previousMinMax.r);
            depthMax = max(depthMax, previousMinMax.g * float(previousMinMax.g != 1.f));
        }
        
    }
    return vec2(depthMin, depthMax);
} 

//single pass downscaling reference: https://github.com/GPUOpen-Effects/FidelityFX-SPD/tree/master/docs
//depth buffer min/max reference: https://miketuritzin.com/post/hierarchical-depth-buffers/
//takes depth buffer in and writes min/max to image mip levels
//one compute shader to compute all levels
void main(){
    
    bool fromDepthBuffer = true;
    int srcMipLevel = 0;
    
    ivec2 srcMipRes = ivec2(depthBufferResX,  depthBufferResY);
    ivec2 currentMipRes = ivec2(max(srcMipRes / 2, ivec2(1)));
    
    //mip 0
    if((mipCount >= 11)){
        ivec2 offsets[4] = { ivec2(0, 0), ivec2(1, 0), ivec2(0, 1), ivec2(1, 1) };
        
        for(int i = 0; i < 4; i++){
            ivec2 dstUV = ivec2(gl_GlobalInvocationID.xy) * 2 + offsets[i];
            if(dstUV.x < currentMipRes.x && dstUV.y < currentMipRes.y){
                vec2 minMax = computeMinMax(dstUV * 2, fromDepthBuffer, srcMipLevel, srcMipRes, isOdd(srcMipRes.y), isOdd(srcMipRes.x));
                imageStore(pyramidMip0, dstUV, vec4(minMax, 0, 0));            
            }
        }
        if(!fromDepthBuffer){
            srcMipLevel++;
        }
        fromDepthBuffer = false;
        srcMipRes = currentMipRes;
        currentMipRes = ivec2(max(srcMipRes / 2, ivec2(1)));
    }   
    //mip 1
    if(mipCount >= 10){
        ivec2 dstUV = ivec2(gl_GlobalInvocationID.xy);
        if(dstUV.x < currentMipRes.x && dstUV.y < currentMipRes.y){
            vec2 minMax = computeMinMax(dstUV * 2, fromDepthBuffer, srcMipLevel, srcMipRes, isOdd(srcMipRes.y), isOdd(srcMipRes.x));
            imageStore(pyramidMip1, dstUV, vec4(minMax, 0, 0));
        }
        if(!fromDepthBuffer){
            srcMipLevel++;
        }
        fromDepthBuffer = false;
        srcMipRes = currentMipRes;
        currentMipRes = ivec2(max(srcMipRes / 2, ivec2(1)));
    }
    //mip 2
    if(mipCount >= 9){
        if(gl_LocalInvocationID.x < 8 && gl_LocalInvocationID.y < 8){
            ivec2 dstUV = ivec2(gl_LocalInvocationID.xy) + ivec2(gl_WorkGroupID.xy) * ivec2(8, 8);
            if(dstUV.x < currentMipRes.x && dstUV.y < currentMipRes.y){
                vec2 minMax = computeMinMax(dstUV * 2, fromDepthBuffer, srcMipLevel, srcMipRes, isOdd(srcMipRes.y), isOdd(srcMipRes.x));
                imageStore(pyramidMip2, dstUV, vec4(minMax, 0, 0));
            }
        }
        if(!fromDepthBuffer){
            srcMipLevel++;
        }
        fromDepthBuffer = false;
        srcMipRes = currentMipRes;
        currentMipRes = ivec2(max(srcMipRes / 2, ivec2(1)));
    }
    //mip 3
    if(mipCount >= 8){
        if(gl_LocalInvocationID.x < 4 && gl_LocalInvocationID.y < 4){
            ivec2 dstUV = ivec2(gl_LocalInvocationID.xy) + ivec2(gl_WorkGroupID.xy) * ivec2(4, 4);
            if(dstUV.x < currentMipRes.x && dstUV.y < currentMipRes.y){
                vec2 minMax = computeMinMax(dstUV * 2, fromDepthBuffer, srcMipLevel, srcMipRes, isOdd(srcMipRes.y), isOdd(srcMipRes.x));
                imageStore(pyramidMip3, dstUV, vec4(minMax, 0, 0));
            }
        }
        if(!fromDepthBuffer){
            srcMipLevel++;
        }
        fromDepthBuffer = false;
        srcMipRes = currentMipRes;
        currentMipRes = ivec2(max(srcMipRes / 2, ivec2(1)));
    }
    //mip 4
    if(mipCount >= 7){
        if(gl_LocalInvocationID.x < 2 && gl_LocalInvocationID.y < 2){
            ivec2 dstUV = ivec2(gl_LocalInvocationID.xy) + ivec2(gl_WorkGroupID.xy) * ivec2(2, 2);
            if(dstUV.x < currentMipRes.x && dstUV.y < currentMipRes.y){
                vec2 minMax = computeMinMax(dstUV * 2, fromDepthBuffer, srcMipLevel, srcMipRes, isOdd(srcMipRes.y), isOdd(srcMipRes.x));
                imageStore(pyramidMip4, dstUV, vec4(minMax, 0, 0));
            }
        }
        if(!fromDepthBuffer){
            srcMipLevel++;
        }
        fromDepthBuffer = false;
        srcMipRes = currentMipRes;
        currentMipRes = ivec2(max(srcMipRes / 2, ivec2(1)));
    }
    
    //mip 5
    if(mipCount >= 6){
        if(gl_LocalInvocationID.x < 1 && gl_LocalInvocationID.y < 1){
            ivec2 dstUV = ivec2(gl_LocalInvocationID.xy) + ivec2(gl_WorkGroupID.xy);
            if(dstUV.x < currentMipRes.x && dstUV.y < currentMipRes.y){
                vec2 minMax = computeMinMax(dstUV * 2, fromDepthBuffer, srcMipLevel, srcMipRes, isOdd(srcMipRes.y), isOdd(srcMipRes.x));
                imageStore(pyramidMip5, dstUV, vec4(minMax, 0, 0));
            }
        }
        if(!fromDepthBuffer){
            srcMipLevel++;
        }
        fromDepthBuffer = false;
        srcMipRes = currentMipRes;
        currentMipRes = ivec2(max(srcMipRes / 2, ivec2(1)));
    }
    
    //increment counter once per threadgroup, write previous value to shared memory
    if(gl_LocalInvocationIndex == 0){
        threadCounter = atomicAdd(syncCounter, 1); 
    }
    
    //wait until threadCounter has been updated
    barrier();
    
    //only last group computes last mip levels
    if(threadCounter != threadGroupCount-1){
        return;
    }
    //reset counter for next frame
    syncCounter = 0;
    
    //from here gl_LocalInvocationID must be used to compute uvs
    
    //mip 6
    if(mipCount >= 5){
        ivec2 offsets[4] = { ivec2(0, 0), ivec2(1, 0), ivec2(0, 1), ivec2(1, 1) };
        
        for(int i = 0; i < 4; i++){
            ivec2 dstUV = ivec2(gl_LocalInvocationID.xy) * 2 + offsets[i];
            if(dstUV.x < currentMipRes.x && dstUV.y < currentMipRes.y){
                vec2 minMax = computeMinMax(dstUV * 2, fromDepthBuffer, srcMipLevel, srcMipRes, isOdd(srcMipRes.y), isOdd(srcMipRes.x));
                imageStore(pyramidMip6, dstUV, vec4(minMax, 0, 0));            
            }
        }
        if(!fromDepthBuffer){
            srcMipLevel++;
        }
        fromDepthBuffer = false;
        srcMipRes = currentMipRes;
        currentMipRes = ivec2(max(srcMipRes / 2, ivec2(1)));
    }
    //mip 7
    if(mipCount >= 4){
        ivec2 dstUV = ivec2(gl_LocalInvocationID.xy);
        if(dstUV.x < currentMipRes.x && dstUV.y < currentMipRes.y){
            vec2 minMax = computeMinMax(dstUV * 2, fromDepthBuffer, srcMipLevel, srcMipRes, isOdd(srcMipRes.y), isOdd(srcMipRes.x));
            imageStore(pyramidMip7, dstUV, vec4(minMax, 0, 0));
        }
        if(!fromDepthBuffer){
            srcMipLevel++;
        }
        fromDepthBuffer = false;
        srcMipRes = currentMipRes;
        currentMipRes = ivec2(max(srcMipRes / 2, ivec2(1)));
    }
    //mip 8
    if(mipCount >= 3){
        if(gl_LocalInvocationID.x < 8 && gl_LocalInvocationID.y < 8){
            ivec2 dstUV = ivec2(gl_LocalInvocationID.xy);
            if(dstUV.x < currentMipRes.x && dstUV.y < currentMipRes.y){
                vec2 minMax = computeMinMax(dstUV * 2, fromDepthBuffer, srcMipLevel, srcMipRes, isOdd(srcMipRes.y), isOdd(srcMipRes.x));
                imageStore(pyramidMip8, dstUV, vec4(minMax, 0, 0));
            }
        }
        if(!fromDepthBuffer){
            srcMipLevel++;
        }
        fromDepthBuffer = false;
        srcMipRes = currentMipRes;
        currentMipRes = ivec2(max(srcMipRes / 2, ivec2(1)));
    }
    //mip 9
    if(mipCount >= 2){
        if(gl_LocalInvocationID.x < 4 && gl_LocalInvocationID.y < 4){
            ivec2 dstUV = ivec2(gl_LocalInvocationID.xy);
            if(dstUV.x < currentMipRes.x && dstUV.y < currentMipRes.y){
                vec2 minMax = computeMinMax(dstUV * 2, fromDepthBuffer, srcMipLevel, srcMipRes, isOdd(srcMipRes.y), isOdd(srcMipRes.x));
                imageStore(pyramidMip9, dstUV, vec4(minMax, 0, 0));
            }
        }
        if(!fromDepthBuffer){
            srcMipLevel++;
        }
        fromDepthBuffer = false;
        srcMipRes = currentMipRes;
        currentMipRes = ivec2(max(srcMipRes / 2, ivec2(1)));
    }
    
    //mip 10
    if(mipCount >= 1){
        
        if(gl_LocalInvocationID.x < 2 && gl_LocalInvocationID.y < 2){
            
            ivec2 dstUV = ivec2(gl_LocalInvocationID.xy);
            if(dstUV.x < currentMipRes.x && dstUV.y < currentMipRes.y){
                vec2 minMax = computeMinMax(dstUV * 2, fromDepthBuffer, srcMipLevel, srcMipRes, isOdd(srcMipRes.y), isOdd(srcMipRes.x)); 
                imageStore(pyramidMip10, dstUV, vec4(minMax, 0, 0));
            }
        }
    }
}
#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable

#include "global.inc"
#include "sampling.inc"
#include "cubemap.inc"
#include "sky.inc"
#include "noise.inc"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set=1, binding = 0, r11f_g11f_b10f)	uniform imageCube	cubeOut;
layout(set=1, binding = 1) uniform texture2D	skyLut;

//prefiltering by using mips does not work for the sky
//as the sky lut is already very low resolution color and brightness starts to deviate quickly on lower mips
//instead use noise and a high sample count for acceptable quality
void main(){
	ivec3 storageCo = ivec3(gl_GlobalInvocationID.xyz);
    
    if(storageCo.x >= imageSize(cubeOut).x || storageCo.y >= imageSize(cubeOut).y){
        return;
    }
    
	vec3 N = cubemapCoordinateToDirection(storageCo, imageSize(cubeOut).x);
	
    float samplesTaken = 0.f;
	vec3 color = vec3(0.f);    
    bool groundTruth = false;
    int samples = groundTruth ? 5000 : 100; //minimum of what is acceptable in combination with noise
    
	for(int i = 0; i < samples; i++){
        vec2 xi = hammersley2d(i, samples);
        vec2 noise = (vec2(hash(samples + storageCo.yz), hash(samples + storageCo.xy)) - 0.5) * 0.5f;
        xi += groundTruth ? vec2(0) : noise;
        xi = fract(xi); //bring back into [0,1] range
        vec3 sampleDirection = importanceSampleCosine(xi, N);
        
        float NoL = dot(N, sampleDirection);
        //only allow samples in upper hemisphere
        if(NoL > 0.f){                
            vec2 skyUV = toSkyLut(sampleDirection);
            vec3 sampleColor = textureLod(sampler2D(skyLut, g_sampler_linearRepeat), skyUV, 0).rgb;
            color += sampleColor;
            samplesTaken += 1.f;
        }
	}
	color /= samplesTaken; 
    //we must divide the sample trough the pdf which is (NoL / pi)
    //the NoL from the PDF is compensated with the NoL of the light direction
    //what is left is division with 1 / pi which equals multiplication with pi and can be pulled out of the loop
    //lambert = albedo / pi compensates exactly that
    color *= pi;
	imageStore(cubeOut, storageCo, vec4(color, 1.f)); 
}
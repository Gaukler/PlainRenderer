#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable

#include "global.inc"
#include "brdf.inc"
#include "sampling.inc"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set=1, binding = 0, rgba16f) uniform image2D lut;

//decices which brdf is integrated and stored in z coordinate
//0: lambert
//1: disney
//2: CoD WWII
//3: Titanfall 2
layout(constant_id = 0) const int diffuseBRDF = 0;

void main(){
    ivec2 uv = ivec2(gl_GlobalInvocationID.xy);

    float r = uv.x / float(imageSize(lut).x);
    r = max(r, 0.0001f);

    float NoV = max(float(uv.y), 0.1f) / float(imageSize(lut).y);

    vec3 V = vec3(sqrt( 1.0f - NoV * NoV ), 0.f, NoV);
    vec3 N = vec3(0.f, 0.f, 1.f);

    int samples = 1024;

    vec3 result = vec3(0.f);
    for(int i = 0; i < samples; i++){

        vec2 xi = hammersley2d(i, samples);

        //specular
        {
            vec3 H = importanceSampleGGX(xi, r, N);

            vec3 L = 2.f * dot(V, H ) * H - V;

            float VoH = max(dot(V, H), 0.f);
            float NoH = max(H.z, 0);
            float NoL = max(L.z, 0);

            if(NoL > 0.f){
                float F_c = pow(1.f - VoH, 5.f);
                float Vis = Visibility(NoV, NoL, r);

                float k = Vis * VoH * NoL / NoH;

                result.x += F_c * k;
                result.y += k;
            }
        }

        //diffuse
        {
            vec3 L = importanceSampleCosine(xi, N);
            vec3 H = normalize(V + L);
            float VoH = clamp(dot(V, H), 0.f, 1.f);
            float NoL = max(L.z, 0);
            float NoH = max(H.z, 0);

            //DisneyDiffuse and CoDWWIIDiffuse return vec3 but that is just multiplication with the diffuse color, so just take one component
            //diffuse color is effectively ignored by setting it to (1, 1, 1) and is added back when shading 
            //ingoing and outgoing fresnel must be taken into account
            //see: https://seblagarde.wordpress.com/2011/08/17/hello-world/#comment-2405
            //the indirect diffuse is only used for non-metals, whose F0 is hardcoded to 0.04
            //this means the Fresnel effect is only dependant on the in/out angles, meaning it can be simply computed in this integral
            vec3 F0Diffuse = vec3(0.04);
            //as F0Diffuse has same components for rgb the resulting fresnel terms also have same rgb, meaning we can take one component
            float fresnelInOut = (1.f - F_Schlick(F0Diffuse, vec3(1.f), NoV).r) * (1.f - F_Schlick(F0Diffuse, vec3(1.f), NoL).r);
            
            if(diffuseBRDF == 0){                
                result.z += (1.f / pi) * fresnelInOut;
            }
            //disney diffuse
            else if(diffuseBRDF == 1){                
                result.z += DisneyDiffuse(vec3(1.f), NoL, VoH, NoV, r).x * fresnelInOut;
            }
            //CoDWWII
            else if(diffuseBRDF == 2){
                result.z += CoDWWIIDiffuse(vec3(1.f), NoL, VoH, NoV, NoH, r).x * fresnelInOut; 
            }
            //Titanfall 2, only compute single component, rest can be computed analatically 
            else if(diffuseBRDF == 3){
                float LoV = clamp(dot(L, V), 0.f, 1.f);
                result.z += Titanfall2DiffuseSingleComponent(NoL, LoV, NoV, NoH, r) * fresnelInOut;
            }
        }
    }
    result /= float(samples);

    //must compensate divison by 4 from visibility term
    result.xy *= 4.f;

    imageStore(lut, uv, vec4(result, 0.f));
}
#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable

#include "global.inc"
#include "screenToWorld.inc"
#include "lightBuffer.inc"
#include "SDF.inc"
#include "sky.inc"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set=1, binding = 0, r11f_g11f_b10f)	uniform image2D imageOut;
layout(set=1, binding = 1)					uniform texture3D sceneSDF;
layout(set=1, binding = 2, std140)			uniform sdfVolumeData{
    VolumeInfo sdfInfo;
};
layout(set=1, binding = 3)					uniform texture3D materialTexture;

layout(set=1, binding = 4, std430) buffer lightStorageBuffer{
    LightBuffer lightBuffer;
};
layout(set=1, binding = 5) uniform texture2D skyLut;

void main(){
	ivec2 uv = ivec2(gl_GlobalInvocationID.xy);

	vec2 pixelCoor = (vec2(uv.xy) / g_screenResolution - 0.5) * 2;
	pixelCoor.y *= -1;
	vec3 V = calculateViewDirectionFromPixel(pixelCoor, g_cameraForward.xyz, g_cameraUp.xyz, g_cameraRight.xyz, g_cameraTanFovHalf, g_cameraAspectRatio);

	vec3 rayOrigin = g_cameraPosition.xyz + g_nearPlane * V;	//in range [0, 1]

	vec3 sdfMin = sdfInfo.offset.xyz - sdfInfo.extends.xyz * 0.5f;
	vec3 sdfMax = sdfInfo.offset.xyz + sdfInfo.extends.xyz * 0.5f;

	//check if ray is outside of scene AABB
    if(!isPointInAABB(rayOrigin, sdfMin, sdfMax)){
		HitResult aabbHit = rayAABBIntersection(rayOrigin, V, sdfMin, sdfMax, sdfInfo);
		
		if(aabbHit.hit){
			//move sample point to intersection
			rayOrigin += aabbHit.t * V;
		}
		else{
			//ray missed AABB
			vec3 color = sampleSkyLut(V, skyLut);
			imageStore(imageOut, uv, vec4(color, 0));
			return;
		}
	}
	
	float sdfThreshold = 0.12f;

	SDFTrace trace = sdfTrace(rayOrigin, V, sdfInfo, sceneSDF, sdfThreshold, sdfMin, sdfMax);
	vec3 color;
	if(trace.hit){
		vec3 ambient = vec3(0.1);
		color = shadeHit(trace, sdfInfo, sceneSDF, materialTexture, sdfThreshold, ambient, sdfMin, sdfMax, 
			lightBuffer.sunColor, lightBuffer.sunStrengthExposed);
	}	
	else{
		color = sampleSkyLut(V, skyLut);
	}
	imageStore(imageOut, uv, vec4(color, 1.f));
}
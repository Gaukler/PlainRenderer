#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable

#include "global.inc"
#include "temporalReprojection.inc"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set=1, binding = 1) uniform texture2D currentFrame;
layout(set=1, binding = 2) uniform texture2D lastFrame;
layout(set=1, binding = 3) uniform texture2D secondToLastFrame; //unused for now
layout(set=1, binding = 4, r11f_g11f_b10f) 	uniform image2D targetImage;
layout(set=1, binding = 5) uniform texture2D velocityBuffer;
layout(set=1, binding = 6) uniform texture2D depthBuffer;

//no clamping or history sample rejection as no problems occured yet
//will probably have to revisit this after particle effects volumetric etc. are added that might cause artifacts
void main(){
	ivec2 uv = ivec2(gl_GlobalInvocationID.xy);
    
    vec2 uvSample = (uv + vec2(0.5f)) / vec2(imageSize(targetImage));

	vec2 motion = getClosestFragmentMotion(uv, depthBuffer, velocityBuffer, g_sampler_linearClamp);

	//jitter is set up as quincunx pattern
	//it's alternating between (0, 0) and (0.5, 0.5)
	//for the (0.5, 0.5) offset we want a bilinear sample, see "Filmic SMAA in Call of Duty" page 113
    vec2 uvSampleCurrent = uvSample - g_currentFrameCameraJitter;
	vec2 uvSampleLast = uvSample + motion - g_previousFrameCameraJitter;

    vec3 currentSample	= texture(sampler2D(currentFrame, g_sampler_linearClamp), uvSampleCurrent).rgb;
    vec3 lastSample		= texture(sampler2D(lastFrame, g_sampler_linearClamp), uvSampleLast).rgb;
    
    vec3 color = mix(currentSample, lastSample, 0.5f);    
	imageStore(targetImage, uv, vec4(color, 1.f));
    
}